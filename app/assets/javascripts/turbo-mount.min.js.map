{"version":3,"file":"turbo-mount.min.js","sources":["../src/turbo-mount-controller.ts","../src/turbo-mount.ts"],"sourcesContent":["import {Controller} from \"@hotwired/stimulus\"\nimport {ApplicationWithTurboMount} from \"./turbo-mount\";\n\nexport abstract class TurboMountController<T> extends Controller {\n    static values = {\n        props: Object,\n        component: String\n    }\n    static targets = [ \"mount\" ]\n\n    declare readonly propsValue: object;\n    declare readonly componentValue: string;\n    declare readonly hasMountTarget: boolean;\n    declare readonly mountTarget: Element;\n\n    abstract framework: string;\n\n    abstract mountComponent(el: Element, Component: T, props: object): () => void;\n\n    _umountComponentCallback?: () => void;\n\n    connect() {\n        this._umountComponentCallback ||= this.mountComponent(this.mountElement, this.resolvedComponent, this.componentProps);\n    }\n\n    disconnect() {\n        this.umountComponent();\n    }\n\n    propsValueChanged() {\n        this.umountComponent();\n        this._umountComponentCallback ||= this.mountComponent(this.mountElement, this.resolvedComponent, this.componentProps);\n    }\n\n    get componentProps() {\n        return this.propsValue;\n    }\n\n    get mountElement() {\n        return this.hasMountTarget ? this.mountTarget : this.element;\n    }\n\n    get resolvedComponent() {\n        return this.resolveComponent(this.componentValue);\n    }\n\n    umountComponent() {\n        this._umountComponentCallback && this._umountComponentCallback();\n        this._umountComponentCallback = undefined;\n    }\n\n    resolveComponent(component: string): T {\n        const app = this.application as ApplicationWithTurboMount<T>\n        return app.turboMount[this.framework].resolve(component);\n    }\n}\n\n\n","import {Application, ControllerConstructor} from '@hotwired/stimulus';\n\nexport interface ApplicationWithTurboMount<T> extends Application {\n    turboMount: { [framework: string]: TurboMount<T> };\n}\n\nexport type Plugin = {\n    framework: string;\n    controller: ControllerConstructor;\n}\n\nexport class TurboMount<T> {\n    components: Map<string, T>;\n    application: ApplicationWithTurboMount<T>;\n    framework: string;\n    baseController?: ControllerConstructor;\n\n    constructor(props: { application: Application, plugin: Plugin }) {\n        this.components = new Map();\n        this.application = props.application as ApplicationWithTurboMount<T>;\n        this.framework = props.plugin.framework;\n        this.baseController = props.plugin.controller;\n\n        this.application.turboMount ||= {};\n        this.application.turboMount[this.framework] = this;\n\n        if (this.baseController) {\n            this.application.register(`turbo-mount-${this.framework}`, this.baseController);\n        }\n    }\n\n    register(name: string, component: T, controller?: ControllerConstructor) {\n        controller ||= this.baseController;\n        if (this.components.has(name)) {\n            throw new Error(`Component '${name}' is already registered.`);\n        }\n        this.components.set(name, component);\n\n        if (controller) {\n            const controllerName = `turbo-mount-${this.framework}-${this.camelToKebabCase(name)}`;\n            this.application.register(controllerName, controller);\n        }\n    }\n\n    resolve(name: string) {\n        const component = this.components.get(name);\n        if (!component) {\n            throw new Error(`Unknown component: ${name}`);\n        }\n        return component;\n    }\n\n    camelToKebabCase(str: string) {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n}\n"],"names":["TurboMountController","Controller","connect","this","_umountComponentCallback","mountComponent","mountElement","resolvedComponent","componentProps","disconnect","umountComponent","propsValueChanged","propsValue","hasMountTarget","mountTarget","element","resolveComponent","componentValue","undefined","component","application","turboMount","framework","resolve","values","props","Object","String","targets","TurboMount","constructor","components","Map","plugin","baseController","controller","_a","register","name","has","Error","set","controllerName","camelToKebabCase","get","str","replace","toLowerCase"],"mappings":"gDAGM,MAAgBA,UAAgCC,EAkBlD,OAAAC,GACIC,KAAKC,2BAALD,KAAKC,yBAA6BD,KAAKE,eAAeF,KAAKG,aAAcH,KAAKI,kBAAmBJ,KAAKK,gBACzG,CAED,UAAAC,GACIN,KAAKO,iBACR,CAED,iBAAAC,GACIR,KAAKO,kBACLP,KAAKC,2BAALD,KAAKC,yBAA6BD,KAAKE,eAAeF,KAAKG,aAAcH,KAAKI,kBAAmBJ,KAAKK,gBACzG,CAED,kBAAIA,GACA,OAAOL,KAAKS,UACf,CAED,gBAAIN,GACA,OAAOH,KAAKU,eAAiBV,KAAKW,YAAcX,KAAKY,OACxD,CAED,qBAAIR,GACA,OAAOJ,KAAKa,iBAAiBb,KAAKc,eACrC,CAED,eAAAP,GACIP,KAAKC,0BAA4BD,KAAKC,2BACtCD,KAAKC,8BAA2Bc,CACnC,CAED,gBAAAF,CAAiBG,GAEb,OADYhB,KAAKiB,YACNC,WAAWlB,KAAKmB,WAAWC,QAAQJ,EACjD,EAlDMnB,EAAAwB,OAAS,CACZC,MAAOC,OACPP,UAAWQ,QAER3B,EAAA4B,QAAU,CAAE,eCGVC,EAMT,WAAAC,CAAYL,SACRtB,KAAK4B,WAAa,IAAIC,IACtB7B,KAAKiB,YAAcK,EAAML,YACzBjB,KAAKmB,UAAYG,EAAMQ,OAAOX,UAC9BnB,KAAK+B,eAAiBT,EAAMQ,OAAOE,YAEnCC,EAAAjC,KAAKiB,aAAYC,aAAAe,EAAAf,WAAe,CAAA,GAChClB,KAAKiB,YAAYC,WAAWlB,KAAKmB,WAAanB,KAE1CA,KAAK+B,gBACL/B,KAAKiB,YAAYiB,SAAS,eAAelC,KAAKmB,YAAanB,KAAK+B,eAEvE,CAED,QAAAG,CAASC,EAAcnB,EAAcgB,GAEjC,GADAA,IAAAA,EAAehC,KAAK+B,gBAChB/B,KAAK4B,WAAWQ,IAAID,GACpB,MAAM,IAAIE,MAAM,cAAcF,6BAIlC,GAFAnC,KAAK4B,WAAWU,IAAIH,EAAMnB,GAEtBgB,EAAY,CACZ,MAAMO,EAAiB,eAAevC,KAAKmB,aAAanB,KAAKwC,iBAAiBL,KAC9EnC,KAAKiB,YAAYiB,SAASK,EAAgBP,EAC7C,CACJ,CAED,OAAAZ,CAAQe,GACJ,MAAMnB,EAAYhB,KAAK4B,WAAWa,IAAIN,GACtC,IAAKnB,EACD,MAAM,IAAIqB,MAAM,sBAAsBF,KAE1C,OAAOnB,CACV,CAED,gBAAAwB,CAAiBE,GACb,OAAOA,EAAIC,QAAQ,kBAAmB,SAASC,aAClD"}